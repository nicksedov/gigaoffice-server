openapi: 3.0.3
info:
  title: GigaOffice AI Service API
  version: "1.0.0"
  description: |
    Промежуточный сервер для интеграции плагинов Р7-Офис с AI-моделью GigaChat.
    • Хранит заявки и метаданные в PostgreSQL  
    • Обменивается заданиями и ответами через Kafka (топики *gigaoffice-requests*, *gigaoffice-responses*, *gigaoffice-dlq*)
servers:
  - url: https://omv-gigaoffice.ydns.eu
    description: Production

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RequestStatus:
      type: string
      description: |
        Текущее состояние запроса к AI.
        • **pending** — запрос сохранён в БД и ожидает обработки  
        • **processing** — запрос обрабатывается; сообщение отправлено в Kafka и/или выполняется фоновая задача  
        • **completed** — ответ от GigaChat сохранён в БД; результат готов к выдаче  
        • **failed** — при обработке возникла ошибка (см. *error_message*)  
        • **cancelled** — запрос отменён пользователем или администратором
      enum: [pending, processing, completed, failed, cancelled]

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          example: ok
        response_time:
          type: number
          format: float
          description: Время ответа health-чека (сек)
        database:
          type: boolean
        gigachat:
          type: boolean
        kafka:
          type: boolean
        queue_size:
          type: integer
          description: Количество сообщений, отправленных в Kafka
        memory_usage:
          type: number
          format: float
        cpu_usage:
          type: number
          format: float

    PingResponse:
      type: object
      properties:
        status:
          type: string
          example: pong

    AIRequestCreate:
      type: object
      required: [output_range, query_text]
      properties:
        input_range:
          type: string
          maxLength: 50
        output_range:
          type: string
          maxLength: 50
        query_text:
          type: string
        preset_prompt:
          type: string
        input_data:
          type: array
          items:
            type: object
          description: Табличные данные из листа Р7-Офис (если есть)

    AIProcessResponse:
      type: object
      properties:
        success:
          type: boolean
        request_id:
          type: string
          format: uuid
        status:
          type: string
          example: queued
        message:
          type: string

    ProcessingStatus:
      type: object
      properties:
        request_id:
          type: string
        status:
          $ref: '#/components/schemas/RequestStatus'
        progress:
          type: integer
          minimum: 0
          maximum: 100
        message:
          type: string
        estimated_time:
          type: integer
          description: Оставшееся время (сек)

    AIResultResponse:
      type: object
      properties:
        success:
          type: boolean
        status:
          $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
        result:
          type: array
          items:
            type: array
            items: {}
          description: Табличный результат от GigaChat
        tokens_used:
          type: integer
        processing_time:
          type: number
          format: float

    # New schemas for enhanced spreadsheet functionality
    SpreadsheetMetadata:
      type: object
      properties:
        version:
          type: string
          example: "1.0"
        format:
          type: string
          example: "enhanced-spreadsheet-data"
        created_at:
          type: string
          format: date-time
        plugin_id:
          type: string

    WorksheetOptions:
      type: object
      properties:
        auto_resize_columns:
          type: boolean
          default: true
        freeze_headers:
          type: boolean
          default: true
        auto_filter:
          type: boolean
          default: true

    WorksheetInfo:
      type: object
      properties:
        name:
          type: string
          default: "Sheet1"
        range:
          type: string
          default: "A1"
        options:
          $ref: '#/components/schemas/WorksheetOptions'

    HeaderStyle:
      type: object
      properties:
        background_color:
          type: string
        font_color:
          type: string
        font_weight:
          type: string
        font_size:
          type: integer
        horizontal_alignment:
          type: string
        vertical_alignment:
          type: string
        border:
          type: object
          additionalProperties:
            type: string

    HeaderData:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        style:
          $ref: '#/components/schemas/HeaderStyle'

    RowStyle:
      type: object
      properties:
        background_color:
          type: string
        font_weight:
          type: string

    DataRow:
      type: object
      properties:
        values:
          type: array
          items:
            oneOf:
              - type: string
              - type: number
              - type: boolean
        style:
          $ref: '#/components/schemas/RowStyle'

    ColumnValidation:
      type: object
      properties:
        type:
          type: string
        min:
          type: number
        max:
          type: number

    ColumnDefinition:
      type: object
      properties:
        index:
          type: integer
        name:
          type: string
        type:
          type: string
        format:
          type: string
        width:
          type: integer
        validation:
          $ref: '#/components/schemas/ColumnValidation'

    DefaultStyle:
      type: object
      properties:
        font_family:
          type: string
          default: "Arial"
        font_size:
          type: integer
          default: 10
        font_color:
          type: string
          default: "#000000"
        background_color:
          type: string
          default: "#FFFFFF"

    HeaderStylePreset:
      type: object
      properties:
        font_weight:
          type: string
          default: "bold"
        font_size:
          type: integer
          default: 12
        background_color:
          type: string
          default: "#4472C4"
        font_color:
          type: string
          default: "#FFFFFF"

    AlternatingRowStyle:
      type: object
      properties:
        even:
          type: object
          additionalProperties:
            type: string
        odd:
          type: object
          additionalProperties:
            type: string

    StyleDefinition:
      type: object
      properties:
        default:
          $ref: '#/components/schemas/DefaultStyle'
        header:
          $ref: '#/components/schemas/HeaderStylePreset'
        alternating_rows:
          $ref: '#/components/schemas/AlternatingRowStyle'

    FormulaDefinition:
      type: object
      properties:
        cell:
          type: string
        formula:
          type: string
        description:
          type: string

    ChartPosition:
      type: object
      properties:
        top:
          type: integer
        left:
          type: integer
        width:
          type: integer
        height:
          type: integer

    ChartStyle:
      type: object
      properties:
        color_scheme:
          type: string
          default: "office"

    ChartDefinition:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        range:
          type: string
        position:
          $ref: '#/components/schemas/ChartPosition'
        style:
          $ref: '#/components/schemas/ChartStyle'

    SpreadsheetData:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/SpreadsheetMetadata'
        worksheet:
          $ref: '#/components/schemas/WorksheetInfo'
        data:
          type: object
          properties:
            headers:
              $ref: '#/components/schemas/HeaderData'
            rows:
              type: array
              items:
                $ref: '#/components/schemas/DataRow'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ColumnDefinition'
        styles:
          $ref: '#/components/schemas/StyleDefinition'
        formulas:
          type: array
          items:
            $ref: '#/components/schemas/FormulaDefinition'
        charts:
          type: array
          items:
            $ref: '#/components/schemas/ChartDefinition'

    SpreadsheetRequest:
      type: object
      required: [spreadsheet_data, query_text]
      properties:
        spreadsheet_data:
          $ref: '#/components/schemas/SpreadsheetData'
        query_text:
          type: string
        category:
          type: string

    SpreadsheetResponse:
      type: object
      properties:
        success:
          type: boolean
        request_id:
          type: string
        status:
          type: string
        message:
          type: string
        result_data:
          $ref: '#/components/schemas/SpreadsheetData'
        error_message:
          type: string

    CategoryInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
        is_active:
          type: boolean
        sort_order:
          type: integer
        prompt_count:
          type: integer

    PromptCategoriesResponse:
      type: object
      properties:
        status:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryInfo'

    PromptInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        template:
          type: string
        category_id:
          type: integer

    CategoryDetailsResponse:
      type: object
      properties:
        status:
          type: string
        category:
          $ref: '#/components/schemas/CategoryInfo'
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/PromptInfo'

    PresetPromptInfo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        template:
          type: string
        category_id:
          type: integer
        category_name:
          type: string
        category_display_name:
          type: string

    ClassifiedCategory:
      type: object
      properties:
        name:
          type: string

    PromptClassificationResponse:
      type: object
      properties:
        success:
          type: boolean
        query_text:
          type: string
        category:
          $ref: '#/components/schemas/ClassifiedCategory'
        confidence:
          type: number
          format: float

    PresetPromptsResponse:
      type: object
      properties:
        status:
          type: string
        prompts:
          type: array
          items:
            $ref: '#/components/schemas/PresetPromptInfo'

    QueueInfo:
      type: object
      properties:
        position:
          type: integer
        total_in_queue:
          type: integer
        estimated_wait_time:
          type: integer
        priority:
          type: integer

    QueueResponse:
      type: object
      properties:
        success:
          type: boolean
        queue_info:
          $ref: '#/components/schemas/QueueInfo'

paths:
  /api/health/ping:
    get:
      summary: Проверка доступности сервиса
      description: |
        Простой health-check endpoint для проверки работоспособности API.
      responses:
        '200':
          description: Сервис работает
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
              example:
                status: pong

  /api/health/status:
    get:
      summary: Детальный статус сервиса
      description: |
        Возвращает детальную информацию о состоянии всех компонентов сервиса.
      responses:
        '200':
          description: Полный статус сервиса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealth'
              example:
                status: ok
                response_time: 0.01
                database: true
                gigachat: true
                kafka: true
                queue_size: 0
                memory_usage: 45.2
                cpu_usage: 12.5

  /api/ai/process:
    post:
      summary: Отправка запроса к GigaChat
      description: |
        Отправляет запрос к GigaChat через Kafka и возвращает идентификатор запроса для отслеживания статуса.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIRequestCreate'
      responses:
        '200':
          description: Запрос успешно поставлен в очередь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIProcessResponse'
        '422':
          description: Некорректные параметры запроса
        '500':
          description: Внутренняя ошибка сервера

  /api/ai/status/{request_id}:
    get:
      summary: Получение статуса обработки запроса
      description: |
        Возвращает текущий статус обработки запроса к GigaChat.
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Статус запроса
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingStatus'
        '404':
          description: Запрос не найден
        '500':
          description: Внутренняя ошибка сервера

  /api/ai/result/{request_id}:
    get:
      summary: Получение результата обработки запроса
      description: |
        Возвращает результат обработки запроса к GigaChat, если обработка завершена.
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Результат обработки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIResultResponse'
        '404':
          description: Запрос не найден
        '500':
          description: Внутренняя ошибка сервера

  /api/prompts/categories:
    get:
      summary: Получение списка категорий промптов
      description: |
        Возвращает список всех активных категорий промптов с описанием.
      responses:
        '200':
          description: Список категорий
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptCategoriesResponse'

  /api/prompts/categories/{category_id}:
    get:
      summary: Получение подробной информации о категории
      description: |
        Возвращает подробную информацию о категории и связанных с ней промптах.
      parameters:
        - name: category_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Информация о категории
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDetailsResponse'
        '404':
          description: Категория не найдена
        '500':
          description: Внутренняя ошибка сервера

  /api/prompts/presets:
    get:
      summary: Получение списка предустановленных промптов
      description: |
        Возвращает список всех активных предустановленных промптов.
      parameters:
        - name: category
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Список промптов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresetPromptsResponse'
        '500':
          description: Внутренняя ошибка сервера

  /api/prompts/classify:
    post:
      summary: Классификация пользовательского промпта
      description: |
        Классифицирует пользовательский промпт по предопределенным категориям.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt_text:
                  type: string
                include_descriptions:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Результат классификации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromptClassificationResponse'
        '422':
          description: Некорректные параметры запроса
        '500':
          description: Внутренняя ошибка сервера

  /api/metrics/stats:
    get:
      summary: Получение статистики сервиса
      description: |
        Возвращает статистику использования сервиса за указанный период.
      parameters:
        - name: hours
          in: query
          required: false
          schema:
            type: integer
            default: 24
      responses:
        '200':
          description: Статистика сервиса
          content:
            application/json:
              schema:
                type: object
        '500':
          description: Внутренняя ошибка сервера

  /api/metrics/queue:
    get:
      summary: Получение информации об очереди
      description: |
        Возвращает информацию о текущем состоянии очереди обработки запросов.
      responses:
        '200':
          description: Информация об очереди
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueueResponse'
        '500':
          description: Внутренняя ошибка сервера

  # New endpoints for enhanced spreadsheet functionality
  /api/spreadsheets/process:
    post:
      summary: Обработка расширенных данных таблицы
      description: |
        Отправляет расширенные данные таблицы на обработку с помощью GigaChat.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpreadsheetRequest'
      responses:
        '200':
          description: Запрос успешно поставлен в очередь
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpreadsheetResponse'
        '422':
          description: Некорректные параметры запроса
        '500':
          description: Внутренняя ошибка сервера

  /api/spreadsheets/status/{request_id}:
    get:
      summary: Получение статуса обработки расширенных данных таблицы
      description: |
        Возвращает текущий статус обработки расширенных данных таблицы.
      parameters:
        - name: request_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Статус обработки
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpreadsheetResponse'
        '404':
          description: Запрос не найден
        '500':
          description: Внутренняя ошибка сервера